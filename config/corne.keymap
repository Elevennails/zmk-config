/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_uk.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&led_strip { chain-length = <54>; };

/ {
    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &kp DELETE
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                         &kp LGUI  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6   &kp N7  &kp N8         &kp N9            &kp N0     &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans   &trans  &trans         &kp AT            &kp TILDE  &kp DELETE
&kp LSHFT   &trans        &trans        &trans        &trans        &trans          &trans   &trans  &kp LESS_THAN  &kp GREATER_THAN  &kp QMARK  &kp ESC
                                        &kp LGUI      &sl 3         &kp SPACE       &kp RET  &trans  &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F1     &kp F2     &kp F3  &kp F4    &kp F5  &kp F6       &kp F7     &kp F8     &kp F9        &kp F11           &kp F12   &kp BSPC
&kp LCTRL  &kp GRAVE  &trans  &trans    &trans  &trans       &kp MINUS  &kp EQUAL  &kp UP_ARROW  &kp SINGLE_QUOTE  &kp HASH  &kp DELETE
&kp LSHFT  &kp PIPE   &trans  &trans    &trans  &trans       &trans     &kp LEFT   &kp DOWN      &kp RIGHT         &trans    &kp ESC
                              &kp LGUI  &trans  &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        Num_Pad {
            bindings = <
&kp TAB         &trans  &trans  &trans  &trans  &kp SLASH          &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp MINUS  &trans  &kp BSPC
&kp LCTRL       &trans  &trans  &trans  &trans  &kp ASTERISK       &kp KP_NUMBER_4  &kp KP_N5        &kp KP_NUMBER_6  &kp PLUS   &trans  &kp DELETE
&kp LSHFT       &trans  &trans  &trans  &trans  &trans             &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_ENTER  &trans  &kp ESC
                                &trans  &sl 0   &kp SPACE          &trans           &kp KP_N0        &kp DOT
            >;
        };
    };
};
